{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm","metadata":{"execution":{"iopub.status.busy":"2024-08-15T22:45:19.252549Z","iopub.execute_input":"2024-08-15T22:45:19.253479Z","iopub.status.idle":"2024-08-15T22:45:19.264935Z","shell.execute_reply.started":"2024-08-15T22:45:19.253441Z","shell.execute_reply":"2024-08-15T22:45:19.263838Z"},"trusted":true},"execution_count":110,"outputs":[]},{"cell_type":"markdown","source":"##  Problem Statement\n The training dataset contains three examples with four features (size, bedrooms, floors and, age)\n ","metadata":{}},{"cell_type":"code","source":"X_train = np.array([[2104, 5, 1, 45], [1416, 3, 2, 40], [852, 2, 1, 35]])\ny_train = np.array([460, 232, 178])","metadata":{"execution":{"iopub.status.busy":"2024-08-15T22:23:56.204410Z","iopub.execute_input":"2024-08-15T22:23:56.204811Z","iopub.status.idle":"2024-08-15T22:23:56.211279Z","shell.execute_reply.started":"2024-08-15T22:23:56.204782Z","shell.execute_reply":"2024-08-15T22:23:56.209832Z"},"trusted":true},"execution_count":77,"outputs":[]},{"cell_type":"markdown","source":"##  data visualisation\n*view the dataset and its features by plotting each feature versus price.*","metadata":{}},{"cell_type":"code","source":"X_features = ['size(sqft)','bedrooms','floors','age']\nfig,ax=plt.subplots(1, 4, figsize=(12, 3), sharey=True)\nfor i in range(len(ax)):\n    ax[i].scatter(X_train[:,i],y_train)\n    ax[i].set_xlabel(X_features[i])\nax[0].set_ylabel(\"Price (1000's)\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-15T22:24:02.004986Z","iopub.execute_input":"2024-08-15T22:24:02.005382Z","iopub.status.idle":"2024-08-15T22:24:02.727076Z","shell.execute_reply.started":"2024-08-15T22:24:02.005353Z","shell.execute_reply":"2024-08-15T22:24:02.725748Z"},"trusted":true},"execution_count":78,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x300 with 4 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# data is stored in numpy array/matrix\nprint(X_train.shape)\nprint(y_train.shape)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T22:24:04.892558Z","iopub.execute_input":"2024-08-15T22:24:04.893517Z","iopub.status.idle":"2024-08-15T22:24:04.899603Z","shell.execute_reply.started":"2024-08-15T22:24:04.893471Z","shell.execute_reply":"2024-08-15T22:24:04.898374Z"},"trusted":true},"execution_count":79,"outputs":[{"name":"stdout","text":"(3, 4)\n(3,)\n","output_type":"stream"}]},{"cell_type":"code","source":"y_train = y_train.reshape(3,1)\nprint(y_train.shape)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T22:24:06.024497Z","iopub.execute_input":"2024-08-15T22:24:06.024911Z","iopub.status.idle":"2024-08-15T22:24:06.030973Z","shell.execute_reply.started":"2024-08-15T22:24:06.024880Z","shell.execute_reply":"2024-08-15T22:24:06.029647Z"},"trusted":true},"execution_count":80,"outputs":[{"name":"stdout","text":"(3, 1)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Feature Scaling \n### z-score normalization ","metadata":{}},{"cell_type":"code","source":"def zscore_normalize_features(X):\n    \"\"\"\n    computes  X, zcore normalized by column\n    \n    Args:\n      X (ndarray (m,n))     : input data, m examples, n features\n      \n    Returns:\n      X_norm (ndarray (m,n)): input normalized by column\n      mu (ndarray (n,))     : mean of each feature\n      sigma (ndarray (n,))  : standard deviation of each feature\n    \"\"\"\n    # find the mean of each column/feature\n    mu     = np.mean(X, axis=0)                 # mu will have shape (n,)\n    # find the standard deviation of each column/feature\n    sigma  = np.std(X, axis=0)                  # sigma will have shape (n,)\n    # element-wise, subtract mu for that column from each example, divide by std for that column\n    X_norm = (X - mu) / sigma      \n\n    return (X_norm, mu, sigma)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T22:24:07.932410Z","iopub.execute_input":"2024-08-15T22:24:07.932833Z","iopub.status.idle":"2024-08-15T22:24:07.941032Z","shell.execute_reply.started":"2024-08-15T22:24:07.932792Z","shell.execute_reply":"2024-08-15T22:24:07.939812Z"},"trusted":true},"execution_count":81,"outputs":[]},{"cell_type":"code","source":"X_norm, X_mu, X_sigma = zscore_normalize_features(X_train)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T22:24:09.124078Z","iopub.execute_input":"2024-08-15T22:24:09.124456Z","iopub.status.idle":"2024-08-15T22:24:09.130522Z","shell.execute_reply.started":"2024-08-15T22:24:09.124427Z","shell.execute_reply":"2024-08-15T22:24:09.129193Z"},"trusted":true},"execution_count":82,"outputs":[]},{"cell_type":"markdown","source":"## vectorisation ","metadata":{}},{"cell_type":"code","source":"# Creation of the matrix X, includes Bias\nX = np.hstack((X_norm, np.ones( (X_train.shape[0],1) )))\nprint(X.shape)\nprint(X)\ny = y_train","metadata":{"execution":{"iopub.status.busy":"2024-08-15T22:24:19.492372Z","iopub.execute_input":"2024-08-15T22:24:19.492796Z","iopub.status.idle":"2024-08-15T22:24:19.500797Z","shell.execute_reply.started":"2024-08-15T22:24:19.492763Z","shell.execute_reply":"2024-08-15T22:24:19.499552Z"},"trusted":true},"execution_count":83,"outputs":[{"name":"stdout","text":"(3, 5)\n[[ 1.26311506  1.33630621 -0.70710678  1.22474487  1.        ]\n [-0.08073519 -0.26726124  1.41421356  0.          1.        ]\n [-1.18237987 -1.06904497 -0.70710678 -1.22474487  1.        ]]\n","output_type":"stream"}]},{"cell_type":"code","source":"np.random.seed(0)\n#theta => w_init (w0 to wn) and b  F(x)= w0 . x0 + ..  + wn . xn + b \ntheta =  np.random.randn(5, 1)\nw = theta[:-1]\nb = theta[-1:]\nprint(w.shape)\nprint(w)\nprint(b.shape)\nprint(b)\nprint(theta.shape)\nprint(theta)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T22:27:29.915230Z","iopub.execute_input":"2024-08-15T22:27:29.915644Z","iopub.status.idle":"2024-08-15T22:27:29.925122Z","shell.execute_reply.started":"2024-08-15T22:27:29.915615Z","shell.execute_reply":"2024-08-15T22:27:29.923709Z"},"trusted":true},"execution_count":86,"outputs":[{"name":"stdout","text":"(4, 1)\n[[1.76405235]\n [0.40015721]\n [0.97873798]\n [2.2408932 ]]\n(1, 1)\n[[1.86755799]]\n(5, 1)\n[[1.76405235]\n [0.40015721]\n [0.97873798]\n [2.2408932 ]\n [1.86755799]]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## 1 model","metadata":{}},{"cell_type":"code","source":"def model(X, theta):\n    return X.dot(theta)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T22:27:36.844806Z","iopub.execute_input":"2024-08-15T22:27:36.845237Z","iopub.status.idle":"2024-08-15T22:27:36.850642Z","shell.execute_reply.started":"2024-08-15T22:27:36.845204Z","shell.execute_reply":"2024-08-15T22:27:36.849375Z"},"trusted":true},"execution_count":87,"outputs":[]},{"cell_type":"code","source":"def model_(X, w , b):\n    return X.dot(w) + b","metadata":{"execution":{"iopub.status.busy":"2024-08-15T22:27:38.261242Z","iopub.execute_input":"2024-08-15T22:27:38.261636Z","iopub.status.idle":"2024-08-15T22:27:38.267605Z","shell.execute_reply.started":"2024-08-15T22:27:38.261605Z","shell.execute_reply":"2024-08-15T22:27:38.266344Z"},"trusted":true},"execution_count":88,"outputs":[]},{"cell_type":"markdown","source":"##  2 Cost Function: Mean Square Error\n### squared error cost function :\n 𝐽(𝑤,𝑏)=1/2𝑚 ∑𝑖=0𝑚−1 ( 𝑓𝑤,𝑏(𝑥(𝑖)) − 𝑦(𝑖) )**2\n where   \n𝑓𝑤,𝑏(𝑥(𝑖))=𝑤𝑥(𝑖)+𝑏\n\n","metadata":{}},{"cell_type":"code","source":"def cost_function(X, y, theta):\n    m = len(y)\n    return 1/(2*m) * np.sum((model(X, theta) - y)**2)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T22:27:40.472727Z","iopub.execute_input":"2024-08-15T22:27:40.473127Z","iopub.status.idle":"2024-08-15T22:27:40.480268Z","shell.execute_reply.started":"2024-08-15T22:27:40.473097Z","shell.execute_reply":"2024-08-15T22:27:40.478576Z"},"trusted":true},"execution_count":89,"outputs":[]},{"cell_type":"code","source":"def cost_function_(X, y, w , b):\n    m = len(y)\n    return 1/(2*m) * np.sum((model_(X, w , b) - y)**2)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T22:27:42.532834Z","iopub.execute_input":"2024-08-15T22:27:42.533305Z","iopub.status.idle":"2024-08-15T22:27:42.540102Z","shell.execute_reply.started":"2024-08-15T22:27:42.533268Z","shell.execute_reply":"2024-08-15T22:27:42.538406Z"},"trusted":true},"execution_count":90,"outputs":[]},{"cell_type":"code","source":"cost_function(X, y, theta)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T22:27:43.289206Z","iopub.execute_input":"2024-08-15T22:27:43.289619Z","iopub.status.idle":"2024-08-15T22:27:43.297260Z","shell.execute_reply.started":"2024-08-15T22:27:43.289588Z","shell.execute_reply":"2024-08-15T22:27:43.295907Z"},"trusted":true},"execution_count":91,"outputs":[{"execution_count":91,"output_type":"execute_result","data":{"text/plain":"48515.0600126127"},"metadata":{}}]},{"cell_type":"code","source":"cost_function_(X_norm, y, w , b)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T22:27:45.212536Z","iopub.execute_input":"2024-08-15T22:27:45.212981Z","iopub.status.idle":"2024-08-15T22:27:45.221349Z","shell.execute_reply.started":"2024-08-15T22:27:45.212947Z","shell.execute_reply":"2024-08-15T22:27:45.220050Z"},"trusted":true},"execution_count":92,"outputs":[{"execution_count":92,"output_type":"execute_result","data":{"text/plain":"48515.0600126127"},"metadata":{}}]},{"cell_type":"markdown","source":"## 3 Gradient Descent\n","metadata":{}},{"cell_type":"code","source":"def grad(X, y, theta):\n    m = len(y)\n    return 1/m * X.T.dot(model(X, theta) - y)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T22:27:50.124429Z","iopub.execute_input":"2024-08-15T22:27:50.124846Z","iopub.status.idle":"2024-08-15T22:27:50.131253Z","shell.execute_reply.started":"2024-08-15T22:27:50.124815Z","shell.execute_reply":"2024-08-15T22:27:50.129981Z"},"trusted":true},"execution_count":93,"outputs":[]},{"cell_type":"code","source":"def grad_(X, y, w , b):\n    m = len(y)\n    dw = 1/m * X.T.dot(model_( X, w , b ) - y) \n    db = 1/m * np.sum ( model_( X, w , b ) - y )\n    return dw , db","metadata":{"execution":{"iopub.status.busy":"2024-08-15T22:27:53.366543Z","iopub.execute_input":"2024-08-15T22:27:53.367346Z","iopub.status.idle":"2024-08-15T22:27:53.374110Z","shell.execute_reply.started":"2024-08-15T22:27:53.367309Z","shell.execute_reply":"2024-08-15T22:27:53.372831Z"},"trusted":true},"execution_count":94,"outputs":[]},{"cell_type":"code","source":"def gradient_descent(X, y, theta, learning_rate, n_iterations):\n    \n    cost_history = np.zeros(n_iterations) # création d'un tableau de stockage pour enregistrer l'évolution du Cout du modele\n    \n    for i in range(0, n_iterations):\n        theta = theta - learning_rate * grad(X, y, theta) # mise a jour du parametre theta (formule du gradient descent)\n        cost_history[i] = cost_function(X, y, theta) # on enregistre la valeur du Cout au tour i dans cost_history[i]\n        \n    return theta, cost_history","metadata":{"execution":{"iopub.status.busy":"2024-08-15T22:29:55.072585Z","iopub.execute_input":"2024-08-15T22:29:55.073464Z","iopub.status.idle":"2024-08-15T22:29:55.080786Z","shell.execute_reply.started":"2024-08-15T22:29:55.073423Z","shell.execute_reply":"2024-08-15T22:29:55.079482Z"},"trusted":true},"execution_count":95,"outputs":[]},{"cell_type":"code","source":"def gradient_descent_(X, y, w , b, learning_rate, n_iterations):\n    \n    cost_history = np.zeros(n_iterations) # creation of a storage table to record the evolution of the cost of the model\n    \n    for i in range(0, n_iterations):\n        dw , db = grad_(X, y, w , b )\n        w = w - learning_rate * dw # update of the w vector parameter (descent gradient formula)\n        b = b - learning_rate * db # update of the b parameter (descent gradient formula)\n    \n        cost_history[i] = cost_function_(X, y, w , b) # we save the value of the Cost at turn i in cost_history[i]\n   \n    return w , b, cost_history","metadata":{"execution":{"iopub.status.busy":"2024-08-15T22:29:57.722119Z","iopub.execute_input":"2024-08-15T22:29:57.722511Z","iopub.status.idle":"2024-08-15T22:29:57.731085Z","shell.execute_reply.started":"2024-08-15T22:29:57.722481Z","shell.execute_reply":"2024-08-15T22:29:57.729801Z"},"trusted":true},"execution_count":96,"outputs":[]},{"cell_type":"markdown","source":"## 4 Phase d'entrainement","metadata":{}},{"cell_type":"code","source":"n_iterations = 1000\nlearning_rate = 0.01\n\ntheta_final, cost_history = gradient_descent(X, y, theta, learning_rate, n_iterations)\nw,b,cost_history = gradient_descent_(X_norm, y, w , b, learning_rate, n_iterations)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T22:30:09.684752Z","iopub.execute_input":"2024-08-15T22:30:09.685159Z","iopub.status.idle":"2024-08-15T22:30:09.762595Z","shell.execute_reply.started":"2024-08-15T22:30:09.685128Z","shell.execute_reply":"2024-08-15T22:30:09.761431Z"},"trusted":true},"execution_count":98,"outputs":[]},{"cell_type":"markdown","source":"### Courbe d'apprentissage\n","metadata":{}},{"cell_type":"code","source":" # voici les parametres du modele une fois que la machine a été entrainée\nprint(theta_final)\nprint(w)\nprint(b)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T22:30:17.330023Z","iopub.execute_input":"2024-08-15T22:30:17.330427Z","iopub.status.idle":"2024-08-15T22:30:17.337823Z","shell.execute_reply.started":"2024-08-15T22:30:17.330395Z","shell.execute_reply":"2024-08-15T22:30:17.336379Z"},"trusted":true},"execution_count":99,"outputs":[{"name":"stdout","text":"[[ 38.30569881]\n [ 40.60962211]\n [-31.14979407]\n [ 37.00506911]\n [289.98756096]]\n[[ 38.30562639]\n [ 40.60969452]\n [-31.15087545]\n [ 37.00493474]]\n[[289.99999946]]\n","output_type":"stream"}]},{"cell_type":"code","source":"plt.plot(range(n_iterations), cost_history)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-15T22:30:36.612784Z","iopub.execute_input":"2024-08-15T22:30:36.613730Z","iopub.status.idle":"2024-08-15T22:30:36.853136Z","shell.execute_reply.started":"2024-08-15T22:30:36.613694Z","shell.execute_reply":"2024-08-15T22:30:36.851937Z"},"trusted":true},"execution_count":100,"outputs":[{"execution_count":100,"output_type":"execute_result","data":{"text/plain":"[<matplotlib.lines.Line2D at 0x78b9a47240d0>]"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"def coef_determination(y, pred):\n    u = ((y - pred)**2).sum()\n    v = ((y - y.mean())**2).sum()\n    return 1 - u/v","metadata":{"execution":{"iopub.status.busy":"2024-08-15T22:30:43.752705Z","iopub.execute_input":"2024-08-15T22:30:43.753124Z","iopub.status.idle":"2024-08-15T22:30:43.760114Z","shell.execute_reply.started":"2024-08-15T22:30:43.753091Z","shell.execute_reply":"2024-08-15T22:30:43.758746Z"},"trusted":true},"execution_count":101,"outputs":[]},{"cell_type":"code","source":"predictions = model(X, theta_final)\n\ncoef_determination(y, predictions)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-15T22:30:45.424107Z","iopub.execute_input":"2024-08-15T22:30:45.424515Z","iopub.status.idle":"2024-08-15T22:30:45.433274Z","shell.execute_reply.started":"2024-08-15T22:30:45.424485Z","shell.execute_reply":"2024-08-15T22:30:45.432047Z"},"trusted":true},"execution_count":102,"outputs":[{"execution_count":102,"output_type":"execute_result","data":{"text/plain":"0.9999999895595721"},"metadata":{}}]},{"cell_type":"code","source":"m,_ = X.shape\nfor i in range(m):\n    print(f\"prediction: {np.dot(X[i],theta_final)}, target value: {y_train[i]}\")","metadata":{"execution":{"iopub.status.busy":"2024-08-15T17:28:08.122834Z","iopub.execute_input":"2024-08-15T17:28:08.123610Z","iopub.status.idle":"2024-08-15T17:28:08.131645Z","shell.execute_reply.started":"2024-08-15T17:28:08.123566Z","shell.execute_reply":"2024-08-15T17:28:08.130203Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stdout","text":"prediction: [459.98695556], target value: [460]\nprediction: [231.98910383], target value: [232]\nprediction: [177.98662351], target value: [178]\n","output_type":"stream"}]},{"cell_type":"code","source":"# retest\n#First, normalize out example.\nx_house = np.array([2104, 5, 1, 45])\nx_house_norm = (x_house - X_mu) / X_sigma\nx_house_norm = np.hstack((x_house_norm, np.ones(1 )))\nprint(x_house_norm)\nx_house_predict = model(x_house_norm,theta_final)\nx_house_predict","metadata":{"execution":{"iopub.status.busy":"2024-08-15T17:28:21.708175Z","iopub.execute_input":"2024-08-15T17:28:21.708593Z","iopub.status.idle":"2024-08-15T17:28:21.719439Z","shell.execute_reply.started":"2024-08-15T17:28:21.708557Z","shell.execute_reply":"2024-08-15T17:28:21.718134Z"},"trusted":true},"execution_count":23,"outputs":[{"name":"stdout","text":"[ 1.26311506  1.33630621 -0.70710678  1.22474487  1.        ]\n","output_type":"stream"},{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"array([459.98695556])"},"metadata":{}}]},{"cell_type":"code","source":"# test new exemple\n# First, normalize out example.\nx_house = np.array([1200, 3, 1, 40])\nx_house_norm = (x_house - X_mu) / X_sigma\nx_house_norm = np.hstack((x_house_norm, np.ones(1 )))\nprint(x_house_norm)\nx_house_predict = model(x_house_norm,theta_final)\nprint(f\" predicted price of a house with 1200 sqft, 3 bedrooms, 1 floor, 40 years old = ${x_house_predict[0]:0.3f}\")","metadata":{"execution":{"iopub.status.busy":"2024-08-15T17:28:24.002209Z","iopub.execute_input":"2024-08-15T17:28:24.002615Z","iopub.status.idle":"2024-08-15T17:28:24.011216Z","shell.execute_reply.started":"2024-08-15T17:28:24.002582Z","shell.execute_reply":"2024-08-15T17:28:24.009699Z"},"trusted":true},"execution_count":24,"outputs":[{"name":"stdout","text":"[-0.50264166 -0.26726124 -0.70710678  0.          1.        ]\n predicted price of a house with 1200 sqft, 3 bedrooms, 1 floor, 40 years old = $281.906\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Adding regularization\n","metadata":{}},{"cell_type":"markdown","source":"### Cost function for regularized linear regression\n\nThe equation for the cost function regularized linear regression is:\n$$J(\\mathbf{w},b) = \\frac{1}{2m} \\sum\\limits_{i = 0}^{m-1} (f_{\\mathbf{w},b}(\\mathbf{x}^{(i)}) - y^{(i)})^2  + \\frac{\\lambda}{2m}  \\sum_{j=0}^{n-1} w_j^2 $$ \nwhere:\n$$ f_{\\mathbf{w},b}(\\mathbf{x}^{(i)}) = \\mathbf{w} \\cdot \\mathbf{x}^{(i)} + b   $$ \n\n\n\nThe difference is the regularization term,  <span style=\"color:blue\">\n    $\\frac{\\lambda}{2m}  \\sum_{j=0}^{n-1} w_j^2$ </span> \n    ","metadata":{}},{"cell_type":"code","source":"def cost_function_reg(X, y, w, b, lambda_ = 1):\n\n    cost = 0.\n    m = len(y)\n    cost = 1/(2*m) * np.sum((model_(X, w,b) - y)**2)\n    reg_cost = 0\n    reg_cost = (lambda_/(2*m)) * np.sum(w**2)\n    total_cost = cost + reg_cost                                       \n    return total_cost","metadata":{"execution":{"iopub.status.busy":"2024-08-15T22:46:25.334355Z","iopub.execute_input":"2024-08-15T22:46:25.334786Z","iopub.status.idle":"2024-08-15T22:46:25.341940Z","shell.execute_reply.started":"2024-08-15T22:46:25.334753Z","shell.execute_reply":"2024-08-15T22:46:25.340826Z"},"trusted":true},"execution_count":114,"outputs":[]},{"cell_type":"code","source":"np.random.seed(1)\nX_tmp = np.random.rand(5,6)\ny_tmp = np.array([0,1,0,1,0])\nw_tmp = np.random.rand(X_tmp.shape[1]).reshape(-1,)-0.5\nb_tmp = np.array([0.5])\nlambda_tmp = 0.7\ncost_tmp = cost_function_reg(X_tmp, y_tmp, w_tmp, b_tmp, lambda_tmp)\n\nprint(\"Regularized cost:\", cost_tmp)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T18:17:49.946088Z","iopub.execute_input":"2024-08-15T18:17:49.946866Z","iopub.status.idle":"2024-08-15T18:17:49.955479Z","shell.execute_reply.started":"2024-08-15T18:17:49.946814Z","shell.execute_reply":"2024-08-15T18:17:49.954093Z"},"trusted":true},"execution_count":43,"outputs":[{"name":"stdout","text":"Regularized cost: 0.07917239320214275\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Computing the Gradient with regularization (both linear/logistic)\nThe gradient calculation for both linear and logistic regression are nearly identical, differing only in computation of $f_{\\mathbf{w}b}$.\n$$\\begin{align*}\n\\frac{\\partial J(\\mathbf{w},b)}{\\partial w_j}  &= \\frac{1}{m} \\sum\\limits_{i = 0}^{m-1} (f_{\\mathbf{w},b}(\\mathbf{x}^{(i)}) - y^{(i)})x_{j}^{(i)}  +  \\frac{\\lambda}{m} w_j  \\\\\n\\frac{\\partial J(\\mathbf{w},b)}{\\partial b}  &= \\frac{1}{m} \\sum\\limits_{i = 0}^{m-1} (f_{\\mathbf{w},b}(\\mathbf{x}^{(i)}) - y^{(i)}) \n\\end{align*}$$","metadata":{}},{"cell_type":"code","source":"def grad_reg(X, y, w , b , lambda_ ):\n    m = len(y)\n    dw = 1/m * X.T.dot(model_( X, w , b ) - y) + (lambda_/m) * w\n    db = 1/m * np.sum( model_( X, w , b ) - y )\n    return dw , db\n\ndef gradient_descent_reg(X, y, w , b , learning_rate , lambda_ , n_iterations):\n    \n    cost_history = np.zeros(n_iterations) # creation of a storage table to record the evolution of the cost of the model\n    \n    for i in tqdm(range(0, n_iterations)):\n        dw , db = grad_reg(X, y, w , b , lambda_ )\n        w = w - learning_rate * dw # update of the w vector parameter (descent gradient formula)\n        b = b - learning_rate * db # update of the b parameter (descent gradient formula)\n        cost_history[i] = cost_function_reg(X, y, w, b, 1) # we save the value of the Cost at turn i in cost_history[i]\n        \n    return w,b, cost_history","metadata":{"execution":{"iopub.status.busy":"2024-08-15T22:49:57.645318Z","iopub.execute_input":"2024-08-15T22:49:57.645786Z","iopub.status.idle":"2024-08-15T22:49:57.656188Z","shell.execute_reply.started":"2024-08-15T22:49:57.645754Z","shell.execute_reply":"2024-08-15T22:49:57.655154Z"},"trusted":true},"execution_count":117,"outputs":[]},{"cell_type":"code","source":"np.random.seed(1)\nX_tmp = np.random.rand(5,3)\ny_tmp = np.array([0,1,0,1,0])\nw_tmp = np.random.rand(X_tmp.shape[1])\nb_tmp = 0.5\nlambda_tmp = 0.7\nlearning_rate_tmp = 0.1\nn_iterations = 1000\ndj_db_tmp, dj_dw_tmp =  grad_reg(X_tmp, y_tmp, w_tmp, b_tmp, lambda_tmp )\nprint(f\"dj_db: {dj_db_tmp}\", )\nprint(f\"Regularized dj_dw:\\n {dj_dw_tmp.tolist()}\", )\nw, b, cost_history_reg =  gradient_descent_reg(X_tmp, y_tmp, w_tmp, b_tmp,learning_rate_tmp, lambda_tmp ,n_iterations )\nprint(f\"w: {w}\", )\nprint(f\"b ::\\n {b}\", )\nw, b, cost_history =  gradient_descent_(X_tmp, y_tmp, w_tmp, b_tmp,learning_rate_tmp ,n_iterations )\nprint(f\"w: {w}\", )\nprint(f\"b ::\\n {b}\", )","metadata":{"execution":{"iopub.status.busy":"2024-08-15T22:53:21.052406Z","iopub.execute_input":"2024-08-15T22:53:21.052828Z","iopub.status.idle":"2024-08-15T22:53:21.174286Z","shell.execute_reply.started":"2024-08-15T22:53:21.052795Z","shell.execute_reply":"2024-08-15T22:53:21.173001Z"},"trusted":true},"execution_count":123,"outputs":[{"name":"stdout","text":"dj_db: [0.29653215 0.49116796 0.21645878]\nRegularized dj_dw:\n 0.6648774569425727\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 1000/1000 [00:00<00:00, 15976.60it/s]","output_type":"stream"},{"name":"stdout","text":"w: [ 0.20188533 -0.38683642  0.21574296]\nb ::\n 0.4757537539451731\nw: [ 1.53569386 -1.1612021   0.06160915]\nb ::\n 0.46198202256784\n","output_type":"stream"},{"name":"stderr","text":"\n","output_type":"stream"}]},{"cell_type":"code","source":"plt.plot(range(n_iterations), cost_history)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-15T22:53:23.764394Z","iopub.execute_input":"2024-08-15T22:53:23.764835Z","iopub.status.idle":"2024-08-15T22:53:23.979001Z","shell.execute_reply.started":"2024-08-15T22:53:23.764803Z","shell.execute_reply":"2024-08-15T22:53:23.977698Z"},"trusted":true},"execution_count":124,"outputs":[{"execution_count":124,"output_type":"execute_result","data":{"text/plain":"[<matplotlib.lines.Line2D at 0x78b99f36a2f0>]"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"plt.plot(range(n_iterations), cost_history_reg)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-15T22:53:29.792849Z","iopub.execute_input":"2024-08-15T22:53:29.793299Z","iopub.status.idle":"2024-08-15T22:53:30.007607Z","shell.execute_reply.started":"2024-08-15T22:53:29.793264Z","shell.execute_reply":"2024-08-15T22:53:30.006294Z"},"trusted":true},"execution_count":125,"outputs":[{"execution_count":125,"output_type":"execute_result","data":{"text/plain":"[<matplotlib.lines.Line2D at 0x78b99f39a980>]"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"## Linear Regression using Scikit-Learn\n**Now we will use Scikit-Learn This toolkit contains implementations of many of the algorithms that we implementes by ourself**","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import SGDRegressor\nfrom sklearn.preprocessing import StandardScaler","metadata":{"execution":{"iopub.status.busy":"2024-08-13T10:16:38.335324Z","iopub.execute_input":"2024-08-13T10:16:38.335719Z","iopub.status.idle":"2024-08-13T10:16:38.341157Z","shell.execute_reply.started":"2024-08-13T10:16:38.335682Z","shell.execute_reply":"2024-08-13T10:16:38.339667Z"},"trusted":true},"execution_count":150,"outputs":[]},{"cell_type":"code","source":"X_train = np.array([[2104, 5, 1, 45], [1416, 3, 2, 40], [852, 2, 1, 35]])\ny_train = np.array([460, 232, 178])\nX_features = ['size(sqft)','bedrooms','floors','age']","metadata":{"execution":{"iopub.status.busy":"2024-08-13T10:16:47.241742Z","iopub.execute_input":"2024-08-13T10:16:47.242646Z","iopub.status.idle":"2024-08-13T10:16:47.248827Z","shell.execute_reply.started":"2024-08-13T10:16:47.242608Z","shell.execute_reply":"2024-08-13T10:16:47.247430Z"},"trusted":true},"execution_count":151,"outputs":[]},{"cell_type":"markdown","source":"### Scale/normalize the training data","metadata":{}},{"cell_type":"code","source":"scaler = StandardScaler()\nX_norm = scaler.fit_transform(X_train)\nprint(f\"Peak to Peak range by column in Raw        X:{np.ptp(X_train,axis=0)}\")   \nprint(f\"Peak to Peak range by column in Normalized X:{np.ptp(X_norm,axis=0)}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-08-13T10:16:53.869341Z","iopub.execute_input":"2024-08-13T10:16:53.869782Z","iopub.status.idle":"2024-08-13T10:16:53.879183Z","shell.execute_reply.started":"2024-08-13T10:16:53.869742Z","shell.execute_reply":"2024-08-13T10:16:53.877591Z"},"trusted":true},"execution_count":152,"outputs":[{"name":"stdout","text":"Peak to Peak range by column in Raw        X:[1252    3    1   10]\nPeak to Peak range by column in Normalized X:[2.44549494 2.40535118 2.12132034 2.44948974]\n","output_type":"stream"}]},{"cell_type":"code","source":"X_norm","metadata":{"execution":{"iopub.status.busy":"2024-08-13T10:17:02.661312Z","iopub.execute_input":"2024-08-13T10:17:02.661732Z","iopub.status.idle":"2024-08-13T10:17:02.669578Z","shell.execute_reply.started":"2024-08-13T10:17:02.661701Z","shell.execute_reply":"2024-08-13T10:17:02.668246Z"},"trusted":true},"execution_count":153,"outputs":[{"execution_count":153,"output_type":"execute_result","data":{"text/plain":"array([[ 1.26311506,  1.33630621, -0.70710678,  1.22474487],\n       [-0.08073519, -0.26726124,  1.41421356,  0.        ],\n       [-1.18237987, -1.06904497, -0.70710678, -1.22474487]])"},"metadata":{}}]},{"cell_type":"markdown","source":"### Create and fit the regression model","metadata":{}},{"cell_type":"code","source":"sgdr = SGDRegressor(max_iter=10000)\nsgdr.fit(X_norm, y_train)\nprint(sgdr)\nprint(f\"number of iterations completed: {sgdr.n_iter_}, number of weight updates: {sgdr.t_}\")","metadata":{"execution":{"iopub.status.busy":"2024-08-13T10:18:03.951234Z","iopub.execute_input":"2024-08-13T10:18:03.951701Z","iopub.status.idle":"2024-08-13T10:18:03.961255Z","shell.execute_reply.started":"2024-08-13T10:18:03.951668Z","shell.execute_reply":"2024-08-13T10:18:03.960069Z"},"trusted":true},"execution_count":154,"outputs":[{"name":"stdout","text":"SGDRegressor(max_iter=10000)\nnumber of iterations completed: 1239, number of weight updates: 3718.0\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### View parameters\n","metadata":{}},{"cell_type":"code","source":"b_norm = sgdr.intercept_\nw_norm = sgdr.coef_\nprint(f\"model parameters:                                          w: {w_norm}, b:{b_norm}\")\nprint( \"model parameters from our impl above theta (w,b):          w: [ 38.37944484  42.53525372 -30.78168313  35.04050949 ], b:[289.98752927]\")","metadata":{"execution":{"iopub.status.busy":"2024-08-13T10:18:13.022564Z","iopub.execute_input":"2024-08-13T10:18:13.023099Z","iopub.status.idle":"2024-08-13T10:18:13.030862Z","shell.execute_reply.started":"2024-08-13T10:18:13.023053Z","shell.execute_reply":"2024-08-13T10:18:13.029645Z"},"trusted":true},"execution_count":155,"outputs":[{"name":"stdout","text":"model parameters:                                          w: [ 38.0527188   41.53885531 -30.94750412  36.34524978], b:[289.50567562]\nmodel parameters from our impl above theta (w,b):          w: [ 38.37944484  42.53525372 -30.78168313  35.04050949 ], b:[289.98752927]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Make predictions\n","metadata":{}},{"cell_type":"code","source":"# make a prediction using sgdr.predict()\ny_pred_sgd = sgdr.predict(X_norm)\n# make a prediction using w,b. \ny_pred = np.dot(X_norm, w_norm) + b_norm  \nprint(f\"prediction using np.dot() and sgdr.predict match: {(y_pred == y_pred_sgd).all()}\")\n\nprint(f\"Prediction on training set:\\n{y_pred[:4]}\" )\nprint(f\"Target values \\n{y_train.reshape(-1,1)[:4]}\")","metadata":{"execution":{"iopub.status.busy":"2024-08-13T10:20:00.281583Z","iopub.execute_input":"2024-08-13T10:20:00.282879Z","iopub.status.idle":"2024-08-13T10:20:00.290775Z","shell.execute_reply.started":"2024-08-13T10:20:00.282819Z","shell.execute_reply":"2024-08-13T10:20:00.289255Z"},"trusted":true},"execution_count":160,"outputs":[{"name":"stdout","text":"prediction using np.dot() and sgdr.predict match: True\nPrediction on training set:\n[459.47611651 231.56537604 177.47553429]\nTarget values \n[[460]\n [232]\n [178]]\n","output_type":"stream"}]},{"cell_type":"code","source":"x_new_house = np.array([1200, 3, 1, 40])\n# Normalize the new example\n#scaler.transform : This applies the same normalization that was applied to the training data to our new example\nx_new_house_norm = scaler.transform([x_new_house])\n\n# Make the prediction using the trained model\n#sgdr.predict : This uses the trained model to predict the price of the new house based on the normalized features.\ny_pred_new_house = sgdr.predict(x_new_house_norm)\n\nprint(f\"Predicted price for the new house: {y_pred_new_house[0]} $\")","metadata":{"execution":{"iopub.status.busy":"2024-08-13T10:22:37.507911Z","iopub.execute_input":"2024-08-13T10:22:37.508989Z","iopub.status.idle":"2024-08-13T10:22:37.518259Z","shell.execute_reply.started":"2024-08-13T10:22:37.508946Z","shell.execute_reply":"2024-08-13T10:22:37.516810Z"},"trusted":true},"execution_count":166,"outputs":[{"name":"stdout","text":"Predicted price for the new house: 281.1602576702351 $\n","output_type":"stream"}]},{"cell_type":"code","source":"#retest\nx_new_house = np.array([2104, 5, 1, 45])\n\nx_new_house_norm = scaler.transform([x_new_house])\ny_pred_new_house = sgdr.predict(x_new_house_norm)\n\nprint(f\"Predicted price for the new house: {y_pred_new_house[0]} $\")","metadata":{"execution":{"iopub.status.busy":"2024-08-13T10:22:46.434366Z","iopub.execute_input":"2024-08-13T10:22:46.434751Z","iopub.status.idle":"2024-08-13T10:22:46.441927Z","shell.execute_reply.started":"2024-08-13T10:22:46.434716Z","shell.execute_reply":"2024-08-13T10:22:46.440624Z"},"trusted":true},"execution_count":167,"outputs":[{"name":"stdout","text":"Predicted price for the new house: 459.4761165149139 $\n","output_type":"stream"}]},{"cell_type":"code","source":"# plot predictions and targets vs original features    \nfig,ax=plt.subplots(1,4,figsize=(12,3),sharey=True)\nfor i in range(len(ax)):\n    ax[i].scatter(X_train[:,i],y_train, label = 'target')\n    ax[i].set_xlabel(X_features[i])\n    ax[i].scatter(X_train[:,i],y_pred,color=[\"orange\"], label = 'predict')\nax[0].set_ylabel(\"Price\"); ax[0].legend();\nfig.suptitle(\"target versus prediction using z-score normalized model\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-13T10:26:11.655243Z","iopub.execute_input":"2024-08-13T10:26:11.655724Z","iopub.status.idle":"2024-08-13T10:26:12.327062Z","shell.execute_reply.started":"2024-08-13T10:26:11.655677Z","shell.execute_reply":"2024-08-13T10:26:12.325791Z"},"trusted":true},"execution_count":169,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x300 with 4 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}